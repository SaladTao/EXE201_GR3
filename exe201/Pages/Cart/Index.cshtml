@page
@model exe201.Pages.Cart.IndexModel
@{
    ViewData["Title"] = "Giỏ hàng";
}

<style>
    .cart-container {
        padding: 2rem 0;
    }

    .cart-item {
        border-bottom: 1px solid #eee;
        padding: 1rem 0;
    }

    .cart-item img {
        max-width: 100px;
        height: auto;
    }

    .quantity-control {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .quantity-btn {
        width: 32px;
        height: 32px;
        border: 1px solid #ddd;
        background: #f8f9fa;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1.2rem;
        font-weight: bold;
        transition: background 0.2s;
    }

    .quantity-btn:hover {
        background: #e2e6ea;
    }

    .quantity-input {
        width: 50px;
        text-align: center;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 0.25rem;
        font-size: 1rem;
    }

    .action-group {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .delete-btn {
        color: #fff;
        background: #dc3545;
        border: none;
        border-radius: 4px;
        padding: 0.4rem 1rem;
        font-size: 1rem;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.4rem;
        cursor: pointer;
        transition: background 0.2s;
    }

    .delete-btn:hover {
        background: #b52a37;
    }

    .checkout-btn {
        background-color: #28a745;
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
        font-size: 1.1rem;
        margin-top: 1.5rem;
        letter-spacing: 1px;
    }

    .checkout-btn:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
    }

    .total-amount {
        font-size: 1.25rem;
        font-weight: bold;
        color: #28a745;
        margin-top: 1.5rem;
    }

    @@media (max-width: 768px) {
        .cart-item .row {
            flex-direction: column;
            gap: 1rem;
        }
        .action-group {
            flex-direction: row;
            justify-content: flex-start;
        }
    }
</style>

<div class="container cart-container">
    <h2 class="mb-4">Giỏ hàng của bạn</h2>

    @if (Model.CartItems == null || !Model.CartItems.Any())
    {
        <div class="alert alert-info">
            Giỏ hàng của bạn đang trống. <a href="/Home/Index">Tiếp tục mua sắm</a>
        </div>
    }
    else
    {
        <form method="post" id="cartForm">
            <div class="row mb-3">
                <div class="col">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="selectAll">
                        <label class="form-check-label" for="selectAll">
                            Chọn tất cả
                        </label>
                    </div>
                </div>
            </div>

            @foreach (var item in Model.CartItems)
            {
                <div class="cart-item">
                    <div class="row align-items-center">
                        <div class="col-auto">
                            <div class="form-check">
                                <input class="form-check-input item-checkbox" type="checkbox" name="selectedItems" value="@item.Id">
                            </div>
                        </div>
                        <div class="col-auto">
                            <img src="@item.Product.ImageUrl" alt="@item.Product.Name" class="img-fluid">
                        </div>
                        <div class="col">
                            <h5>@item.Product.Name</h5>
                            <p class="text-muted">@item.Product.Description</p>
                        </div>
                        <div class="col-auto action-group">
                            <button type="button" class="quantity-btn" onclick="updateQuantity(@item.Id, @item.Quantity - 1)">-</button>
                            <input type="number" class="quantity-input" value="@item.Quantity" min="1" onchange="updateQuantity(@item.Id, this.value)">
                            <button type="button" class="quantity-btn" onclick="updateQuantity(@item.Id, @item.Quantity + 1)">+</button>
                        </div>
                        <div class="col-auto">
                            <span class="price">@((item.Product.Price * item.Quantity).ToString("N0")) VNĐ</span>
                        </div>
                    </div>
                </div>
            }

            <div class="row mt-4">
                <div class="col-md-6">
                    <div class="total-amount">
                        Tổng tiền: @Model.TotalAmount.ToString("N0") VNĐ
                    </div>
                </div>
                <div class="col-md-6 text-end">
                    <button type="submit" asp-page-handler="Checkout" class="checkout-btn" id="checkoutBtn" disabled>
                        Thanh toán
                    </button>
                </div>
            </div>
        </form>
    }
</div>

@section Scripts {
    <script>
        // Xử lý chọn tất cả
        document.getElementById('selectAll').addEventListener('change', function() {
            document.querySelectorAll('.item-checkbox').forEach(checkbox => {
                checkbox.checked = this.checked;
            });
            updateCheckoutButton();
        });

        // Xử lý chọn từng item
        document.querySelectorAll('.item-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updateCheckoutButton);
        });

        // Cập nhật trạng thái nút thanh toán
        function updateCheckoutButton() {
            const checkedItems = document.querySelectorAll('.item-checkbox:checked');
            document.getElementById('checkoutBtn').disabled = checkedItems.length === 0;
        }

        // Cập nhật số lượng
        function updateQuantity(cartItemId, newQuantity) {
            if (newQuantity < 1) return;
            
            fetch('?handler=UpdateQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `cartItemId=${cartItemId}&quantity=${newQuantity}`
            }).then(() => {
                window.location.reload();
            });
        }
    </script>
}
        